; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30140.0 

	TITLE	c:\cpython\externals\zlib-1.2.11\contrib\vstudio\vc14\x86\zlibdllreleasewithoutasm\tmp\infback.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@PJCBIDD@invalid?5block?5type@		; `string'
PUBLIC	??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@ ; `string'
PUBLIC	??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@ ; `string'
PUBLIC	??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@	; `string'
PUBLIC	??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@ ; `string'
PUBLIC	??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@ ; `string'
PUBLIC	??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@ ; `string'
PUBLIC	??_C@_0BG@GMDFCBGP@invalid?5distances?5set@	; `string'
PUBLIC	??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@ ; `string'
PUBLIC	??_C@_0BG@LBKINIKP@invalid?5distance?5code@	; `string'
PUBLIC	??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@ ; `string'
;	COMDAT ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@
CONST	SEGMENT
??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@ DB 'invalid distanc'
	DB	'e too far back', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LBKINIKP@invalid?5distance?5code@
CONST	SEGMENT
??_C@_0BG@LBKINIKP@invalid?5distance?5code@ DB 'invalid distance code', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@
CONST	SEGMENT
??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@ DB 'invalid literal/le'
	DB	'ngth code', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GMDFCBGP@invalid?5distances?5set@
CONST	SEGMENT
??_C@_0BG@GMDFCBGP@invalid?5distances?5set@ DB 'invalid distances set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@
CONST	SEGMENT
??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@ DB 'invalid literal/le'
	DB	'ngths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@
CONST	SEGMENT
??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@ DB 'invalid c'
	DB	'ode -- missing end-of-block', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@
CONST	SEGMENT
??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@ DB 'invalid bit length r'
	DB	'epeat', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@
CONST	SEGMENT
??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@ DB 'invalid code lengths '
	DB	'set', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@
CONST	SEGMENT
??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@ DB 'too many len'
	DB	'gth or distance symbols', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@
CONST	SEGMENT
??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@ DB 'invalid stored bl'
	DB	'ock lengths', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PJCBIDD@invalid?5block?5type@
CONST	SEGMENT
??_C@_0BD@PJCBIDD@invalid?5block?5type@ DB 'invalid block type', 00H ; `string'
?lenfix@?1??fixedtables@@9@9 DB 060H			; `fixedtables'::`2'::lenfix
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c0H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a0H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e0H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	090H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d0H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b0H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f0H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c8H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a8H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e8H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	098H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d8H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b8H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f8H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c4H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a4H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e4H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	094H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d4H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b4H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f4H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0ccH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0acH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0ecH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09cH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0dcH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bcH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fcH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c2H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a2H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e2H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	092H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d2H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b2H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f2H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0caH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0aaH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0eaH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09aH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0daH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0baH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0faH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c6H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a6H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e6H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	096H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d6H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b6H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f6H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0ceH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0aeH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0eeH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09eH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0deH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0beH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0feH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c1H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a1H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e1H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	091H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d1H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b1H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f1H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c9H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a9H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e9H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	099H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d9H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b9H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f9H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c5H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a5H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e5H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	095H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d5H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b5H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f5H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0cdH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0adH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0edH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09dH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0ddH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bdH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fdH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c3H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a3H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e3H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	093H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d3H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b3H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f3H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0cbH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0abH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0ebH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09bH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0dbH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0bbH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0fbH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c7H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a7H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e7H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	097H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d7H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b7H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f7H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0cfH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0afH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0efH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09fH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0dfH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0bfH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0ffH
?distfix@?1??fixedtables@@9@9 DB 010H			; `fixedtables'::`2'::distfix
	DB	05H
	DW	01H
	DB	017H
	DB	05H
	DW	0101H
	DB	013H
	DB	05H
	DW	011H
	DB	01bH
	DB	05H
	DW	01001H
	DB	011H
	DB	05H
	DW	05H
	DB	019H
	DB	05H
	DW	0401H
	DB	015H
	DB	05H
	DW	041H
	DB	01dH
	DB	05H
	DW	04001H
	DB	010H
	DB	05H
	DW	03H
	DB	018H
	DB	05H
	DW	0201H
	DB	014H
	DB	05H
	DW	021H
	DB	01cH
	DB	05H
	DW	02001H
	DB	012H
	DB	05H
	DW	09H
	DB	01aH
	DB	05H
	DW	0801H
	DB	016H
	DB	05H
	DW	081H
	DB	040H
	DB	05H
	DW	00H
	DB	010H
	DB	05H
	DW	02H
	DB	017H
	DB	05H
	DW	0181H
	DB	013H
	DB	05H
	DW	019H
	DB	01bH
	DB	05H
	DW	01801H
	DB	011H
	DB	05H
	DW	07H
	DB	019H
	DB	05H
	DW	0601H
	DB	015H
	DB	05H
	DW	061H
	DB	01dH
	DB	05H
	DW	06001H
	DB	010H
	DB	05H
	DW	04H
	DB	018H
	DB	05H
	DW	0301H
	DB	014H
	DB	05H
	DW	031H
	DB	01cH
	DB	05H
	DW	03001H
	DB	012H
	DB	05H
	DW	0dH
	DB	01aH
	DB	05H
	DW	0c01H
	DB	016H
	DB	05H
	DW	0c1H
	DB	040H
	DB	05H
	DW	00H
?order@?1??inflateBack@@9@9 DW 010H			; `inflateBack'::`2'::order
	DW	011H
	DW	012H
	DW	00H
	DW	08H
	DW	07H
	DW	09H
	DW	06H
	DW	0aH
	DW	05H
	DW	0bH
	DW	04H
	DW	0cH
	DW	03H
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0fH
PUBLIC	_inflateBackEnd@4
PUBLIC	_inflateBack@20
PUBLIC	_inflateBackInit_@20
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\infback.c
;	COMDAT _inflateBackInit_@20
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_window$ = 16						; size = 4
_version$ = 20						; size = 4
_stream_size$ = 24					; size = 4
_inflateBackInit_@20 PROC				; COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 35   :     struct inflate_state FAR *state;
; 36   : 
; 37   :     if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||

  00003	8b 45 14	 mov	 eax, DWORD PTR _version$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  0000a	85 c0		 test	 eax, eax
  0000c	0f 84 c4 00 00
	00		 je	 $LN3@inflateBac
  00012	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  00015	0f 85 bb 00 00
	00		 jne	 $LN3@inflateBac
  0001b	83 7d 18 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  0001f	0f 85 b1 00 00
	00		 jne	 $LN3@inflateBac

; 40   :     if (strm == Z_NULL || window == Z_NULL ||
; 41   :         windowBits < 8 || windowBits > 15)

  00025	53		 push	 ebx
  00026	57		 push	 edi
  00027	85 f6		 test	 esi, esi
  00029	0f 84 9b 00 00
	00		 je	 $LN5@inflateBac
  0002f	8b 5d 10	 mov	 ebx, DWORD PTR _window$[ebp]
  00032	85 db		 test	 ebx, ebx
  00034	0f 84 90 00 00
	00		 je	 $LN5@inflateBac
  0003a	8b 7d 0c	 mov	 edi, DWORD PTR _windowBits$[ebp]
  0003d	8d 47 f8	 lea	 eax, DWORD PTR [edi-8]
  00040	83 f8 07	 cmp	 eax, 7
  00043	0f 87 81 00 00
	00		 ja	 $LN5@inflateBac

; 43   :     strm->msg = Z_NULL;                 /* in case we return an error */
; 44   :     if (strm->zalloc == (alloc_func)0) {

  00049	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0004c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00053	85 c0		 test	 eax, eax
  00055	75 13		 jne	 SHORT $LN10@inflateBac

; 45   : #ifdef Z_SOLO
; 46   :         return Z_STREAM_ERROR;
; 47   : #else
; 48   :         strm->zalloc = zcalloc;
; 49   :         strm->opaque = (voidpf)0;

  00057	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0005a	33 c9		 xor	 ecx, ecx
  0005c	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET _zcalloc
  00063	b8 00 00 00 00	 mov	 eax, OFFSET _zcalloc
  00068	eb 03		 jmp	 SHORT $LN6@inflateBac
$LN10@inflateBac:
  0006a	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
$LN6@inflateBac:

; 50   : #endif
; 51   :     }
; 52   :     if (strm->zfree == (free_func)0)

  0006d	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
  00071	75 07		 jne	 SHORT $LN7@inflateBac

; 53   : #ifdef Z_SOLO
; 54   :         return Z_STREAM_ERROR;
; 55   : #else
; 56   :     strm->zfree = zcfree;

  00073	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], OFFSET _zcfree
$LN7@inflateBac:

; 57   : #endif
; 58   :     state = (struct inflate_state FAR *)ZALLOC(strm, 1,

  0007a	68 d0 1b 00 00	 push	 7120			; 00001bd0H
  0007f	6a 01		 push	 1
  00081	51		 push	 ecx
  00082	ff d0		 call	 eax
  00084	8b d0		 mov	 edx, eax
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH

; 59   :                                                sizeof(struct inflate_state));
; 60   :     if (state == Z_NULL) return Z_MEM_ERROR;

  00089	85 d2		 test	 edx, edx
  0008b	75 0a		 jne	 SHORT $LN8@inflateBac
  0008d	5f		 pop	 edi
  0008e	5b		 pop	 ebx
  0008f	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00092	5e		 pop	 esi

; 70   : }

  00093	5d		 pop	 ebp
  00094	c2 14 00	 ret	 20			; 00000014H
$LN8@inflateBac:

; 61   :     Tracev((stderr, "inflate: allocated\n"));
; 62   :     strm->state = (struct internal_state FAR *)state;

  00097	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 63   :     state->dmax = 32768U;
; 64   :     state->wbits = (uInt)windowBits;
; 65   :     state->wsize = 1U << windowBits;

  0009a	8b cf		 mov	 ecx, edi
  0009c	89 7a 28	 mov	 DWORD PTR [edx+40], edi
  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	5f		 pop	 edi
  000a5	d3 e0		 shl	 eax, cl

; 66   :     state->window = window;

  000a7	89 5a 38	 mov	 DWORD PTR [edx+56], ebx
  000aa	5b		 pop	 ebx
  000ab	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 67   :     state->wnext = 0;
; 68   :     state->whave = 0;
; 69   :     return Z_OK;

  000ae	33 c0		 xor	 eax, eax
  000b0	c7 42 18 00 80
	00 00		 mov	 DWORD PTR [edx+24], 32768 ; 00008000H
  000b7	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
  000be	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
  000c5	5e		 pop	 esi

; 70   : }

  000c6	5d		 pop	 ebp
  000c7	c2 14 00	 ret	 20			; 00000014H
$LN5@inflateBac:
  000ca	5f		 pop	 edi
  000cb	5b		 pop	 ebx

; 42   :         return Z_STREAM_ERROR;

  000cc	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000d1	5e		 pop	 esi

; 70   : }

  000d2	5d		 pop	 ebp
  000d3	c2 14 00	 ret	 20			; 00000014H
$LN3@inflateBac:

; 38   :         stream_size != (int)(sizeof(z_stream)))
; 39   :         return Z_VERSION_ERROR;

  000d6	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  000db	5e		 pop	 esi

; 70   : }

  000dc	5d		 pop	 ebp
  000dd	c2 14 00	 ret	 20			; 00000014H
_inflateBackInit_@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\infback.c
;	COMDAT _fixedtables
_TEXT	SEGMENT
_fixedtables PROC					; COMDAT
; _state$ = ecx

; 85   : #ifdef BUILDFIXED
; 86   :     static int virgin = 1;
; 87   :     static code *lenfix, *distfix;
; 88   :     static code fixed[544];
; 89   : 
; 90   :     /* build fixed huffman tables if first call (may not be thread safe) */
; 91   :     if (virgin) {
; 92   :         unsigned sym, bits;
; 93   :         static code *next;
; 94   : 
; 95   :         /* literal/length table */
; 96   :         sym = 0;
; 97   :         while (sym < 144) state->lens[sym++] = 8;
; 98   :         while (sym < 256) state->lens[sym++] = 9;
; 99   :         while (sym < 280) state->lens[sym++] = 7;
; 100  :         while (sym < 288) state->lens[sym++] = 8;
; 101  :         next = fixed;
; 102  :         lenfix = next;
; 103  :         bits = 9;
; 104  :         inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
; 105  : 
; 106  :         /* distance table */
; 107  :         sym = 0;
; 108  :         while (sym < 32) state->lens[sym++] = 5;
; 109  :         distfix = next;
; 110  :         bits = 5;
; 111  :         inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
; 112  : 
; 113  :         /* do this just once */
; 114  :         virgin = 0;
; 115  :     }
; 116  : #else /* !BUILDFIXED */
; 117  : #   include "inffixed.h"
; 118  : #endif /* BUILDFIXED */
; 119  :     state->lencode = lenfix;

  00000	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], OFFSET ?lenfix@?1??fixedtables@@9@9

; 120  :     state->lenbits = 9;

  00007	c7 41 58 09 00
	00 00		 mov	 DWORD PTR [ecx+88], 9

; 121  :     state->distcode = distfix;

  0000e	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], OFFSET ?distfix@?1??fixedtables@@9@9

; 122  :     state->distbits = 5;

  00015	c7 41 5c 05 00
	00 00		 mov	 DWORD PTR [ecx+92], 5

; 123  : }

  0001c	c3		 ret	 0
_fixedtables ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\infback.c
;	COMDAT _inflateBack@20
_TEXT	SEGMENT
_from$1$ = -48						; size = 4
tv3640 = -48						; size = 4
tv3634 = -44						; size = 4
$T1 = -40						; size = 4
$T2 = -40						; size = 4
$T3 = -40						; size = 4
$T4 = -40						; size = 4
tv3689 = -40						; size = 4
tv3635 = -40						; size = 4
_copy$2$ = -40						; size = 4
$T5 = -36						; size = 4
$T6 = -36						; size = 4
$T7 = -36						; size = 4
tv3625 = -36						; size = 4
tv3585 = -36						; size = 4
tv3584 = -36						; size = 4
tv3574 = -36						; size = 4
tv3637 = -32						; size = 4
_here$1$ = -28						; size = 4
_copy$1$ = -28						; size = 4
_last$ = -28						; size = 4
_put$1$ = -24						; size = 4
_left$1$ = -20						; size = 4
_bits$1$ = -16						; size = 4
_state$1$ = -12						; size = 4
_hold$1$ = -8						; size = 4
_next$ = -4						; size = 4
_strm$ = 8						; size = 4
_in$ = 12						; size = 4
_in_desc$ = 16						; size = 4
_out$ = 20						; size = 4
_out_desc$ = 24						; size = 4
_inflateBack@20 PROC					; COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  :     struct inflate_state FAR *state;
; 258  :     z_const unsigned char FAR *next;    /* next input */
; 259  :     unsigned char FAR *put;     /* next output */
; 260  :     unsigned have, left;        /* available input and output */
; 261  :     unsigned long hold;         /* bit buffer */
; 262  :     unsigned bits;              /* bits in bit buffer */
; 263  :     unsigned copy;              /* number of stored or match bytes to copy */
; 264  :     unsigned char FAR *from;    /* where to copy match bytes from */
; 265  :     code here;                  /* current decoding table entry */
; 266  :     code last;                  /* parent table entry */
; 267  :     unsigned len;               /* length to copy for repeats, bits to drop */
; 268  :     int ret;                    /* return code */
; 269  :     static const unsigned short order[19] = /* permutation of code lengths */
; 270  :         {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 271  : 
; 272  :     /* Check that the strm exists and that the state was initialized */
; 273  :     if (strm == Z_NULL || strm->state == Z_NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	83 ec 30	 sub	 esp, 48			; 00000030H
  00009	85 c9		 test	 ecx, ecx
  0000b	0f 84 6a 0d 00
	00		 je	 $LN254@inflateBac
  00011	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00014	89 55 f4	 mov	 DWORD PTR _state$1$[ebp], edx
  00017	85 d2		 test	 edx, edx
  00019	0f 84 5c 0d 00
	00		 je	 $LN254@inflateBac

; 275  :     state = (struct inflate_state FAR *)strm->state;
; 276  : 
; 277  :     /* Reset the state */
; 278  :     strm->msg = Z_NULL;

  0001f	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00026	53		 push	 ebx

; 279  :     state->mode = TYPE;

  00027	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 280  :     state->last = 0;

  0002e	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 281  :     state->whave = 0;

  00035	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0

; 282  :     next = strm->next_in;

  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00041	56		 push	 esi
  00042	57		 push	 edi
  00043	85 c0		 test	 eax, eax

; 283  :     have = next != Z_NULL ? strm->avail_in : 0;

  00045	74 05		 je	 SHORT $LN343@inflateBac
  00047	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0004a	eb 02		 jmp	 SHORT $LN344@inflateBac
$LN343@inflateBac:
  0004c	33 f6		 xor	 esi, esi
$LN344@inflateBac:

; 284  :     hold = 0;
; 285  :     bits = 0;
; 286  :     put = state->window;

  0004e	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00051	33 ff		 xor	 edi, edi
  00053	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00056	33 db		 xor	 ebx, ebx

; 287  :     left = state->wsize;

  00058	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0005b	89 45 ec	 mov	 DWORD PTR _left$1$[ebp], eax

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  0005e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00061	2d 3f 3f 00 00	 sub	 eax, 16191		; 00003f3fH
  00066	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00069	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0006c	83 f8 12	 cmp	 eax, 18			; 00000012H
  0006f	0f 87 a3 0c 00
	00		 ja	 $LN341@inflateBac
$LN585@inflateBac:
  00075	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  00078	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN512@inflateBac[eax]
  0007f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN513@inflateBac[eax*4]
$LN255@inflateBac:

; 292  :         case TYPE:
; 293  :             /* determine and dispatch block type */
; 294  :             if (state->last) {

  00086	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0008a	74 1b		 je	 SHORT $LN12@inflateBac

; 295  :                 BYTEBITS();

  0008c	8b cb		 mov	 ecx, ebx

; 296  :                 state->mode = DONE;

  0008e	c7 42 04 50 3f
	00 00		 mov	 DWORD PTR [edx+4], 16208 ; 00003f50H
  00095	83 e1 07	 and	 ecx, 7
  00098	d3 ef		 shr	 edi, cl
  0009a	2b d9		 sub	 ebx, ecx
  0009c	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  0009f	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 297  :                 break;

  000a2	e9 60 0c 00 00	 jmp	 $LN548@inflateBac
$LN12@inflateBac:

; 298  :             }
; 299  :             NEEDBITS(3);

  000a7	83 fb 03	 cmp	 ebx, 3
  000aa	73 3b		 jae	 SHORT $LN10@inflateBac
  000ac	0f 1f 40 00	 npad	 4
$LL13@inflateBac:
  000b0	85 f6		 test	 esi, esi
  000b2	75 15		 jne	 SHORT $LN18@inflateBac
  000b4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  000b7	50		 push	 eax
  000b8	51		 push	 ecx
  000b9	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  000bc	8b f0		 mov	 esi, eax
  000be	83 c4 08	 add	 esp, 8
  000c1	85 f6		 test	 esi, esi
  000c3	0f 84 6a 0c 00
	00		 je	 $LN369@inflateBac
$LN18@inflateBac:
  000c9	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  000cc	8b cb		 mov	 ecx, ebx
  000ce	83 c3 08	 add	 ebx, 8
  000d1	4e		 dec	 esi
  000d2	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000d5	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  000d8	d3 e0		 shl	 eax, cl
  000da	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  000dd	03 f8		 add	 edi, eax
  000df	83 fb 03	 cmp	 ebx, 3
  000e2	72 cc		 jb	 SHORT $LL13@inflateBac
  000e4	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN10@inflateBac:

; 300  :             state->last = BITS(1);

  000e7	8b c7		 mov	 eax, edi

; 301  :             DROPBITS(1);

  000e9	d1 ef		 shr	 edi, 1
  000eb	83 e0 01	 and	 eax, 1
  000ee	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 302  :             switch (BITS(2)) {

  000f1	8b c7		 mov	 eax, edi
  000f3	83 e0 03	 and	 eax, 3
  000f6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN514@inflateBac[eax*4]
$LN259@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);

  000fd	c1 ef 02	 shr	 edi, 2
  00100	83 eb 03	 sub	 ebx, 3
  00103	c7 42 04 41 3f
	00 00		 mov	 DWORD PTR [edx+4], 16193 ; 00003f41H
  0010a	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  0010d	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 324  :             break;

  00110	e9 f2 0b 00 00	 jmp	 $LN548@inflateBac
$LN260@inflateBac:

; 303  :             case 0:                             /* stored block */
; 304  :                 Tracev((stderr, "inflate:     stored block%s\n",
; 305  :                         state->last ? " (last)" : ""));
; 306  :                 state->mode = STORED;
; 307  :                 break;
; 308  :             case 1:                             /* fixed block */
; 309  :                 fixedtables(state);

  00115	8b ca		 mov	 ecx, edx
  00117	e8 00 00 00 00	 call	 _fixedtables

; 322  :             }
; 323  :             DROPBITS(2);

  0011c	c1 ef 02	 shr	 edi, 2
  0011f	83 eb 03	 sub	 ebx, 3
  00122	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H
  00129	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  0012c	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 324  :             break;

  0012f	e9 d3 0b 00 00	 jmp	 $LN548@inflateBac
$LN261@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);

  00134	c1 ef 02	 shr	 edi, 2
  00137	83 eb 03	 sub	 ebx, 3
  0013a	c7 42 04 44 3f
	00 00		 mov	 DWORD PTR [edx+4], 16196 ; 00003f44H
  00141	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00144	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 324  :             break;

  00147	e9 bb 0b 00 00	 jmp	 $LN548@inflateBac
$LN262@inflateBac:

; 310  :                 Tracev((stderr, "inflate:     fixed codes block%s\n",
; 311  :                         state->last ? " (last)" : ""));
; 312  :                 state->mode = LEN;              /* decode codes */
; 313  :                 break;
; 314  :             case 2:                             /* dynamic block */
; 315  :                 Tracev((stderr, "inflate:     dynamic codes block%s\n",
; 316  :                         state->last ? " (last)" : ""));
; 317  :                 state->mode = TABLE;
; 318  :                 break;
; 319  :             case 3:
; 320  :                 strm->msg = (char *)"invalid block type";

  0014c	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0014f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BD@PJCBIDD@invalid?5block?5type@

; 321  :                 state->mode = BAD;

  00156	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H
$LN28@inflateBac:

; 322  :             }
; 323  :             DROPBITS(2);

  0015d	c1 ef 02	 shr	 edi, 2
  00160	83 eb 03	 sub	 ebx, 3
  00163	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00166	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 324  :             break;

  00169	e9 99 0b 00 00	 jmp	 $LN548@inflateBac
$LN31@inflateBac:

; 325  : 
; 326  :         case STORED:
; 327  :             /* get and verify stored block length */
; 328  :             BYTEBITS();                         /* go to byte boundary */

  0016e	8b cb		 mov	 ecx, ebx
  00170	83 e1 07	 and	 ecx, 7
  00173	2b d9		 sub	 ebx, ecx
  00175	d3 ef		 shr	 edi, cl
  00177	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  0017a	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 329  :             NEEDBITS(32);

  0017d	83 fb 20	 cmp	 ebx, 32			; 00000020H
  00180	73 3c		 jae	 SHORT $LN32@inflateBac
$LL35@inflateBac:
  00182	85 f6		 test	 esi, esi
  00184	75 17		 jne	 SHORT $LN40@inflateBac
  00186	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00189	50		 push	 eax
  0018a	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0018d	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00190	8b f0		 mov	 esi, eax
  00192	83 c4 08	 add	 esp, 8
  00195	85 f6		 test	 esi, esi
  00197	0f 84 96 0b 00
	00		 je	 $LN369@inflateBac
$LN40@inflateBac:
  0019d	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  001a0	8b cb		 mov	 ecx, ebx
  001a2	83 c3 08	 add	 ebx, 8
  001a5	4e		 dec	 esi
  001a6	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  001a9	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  001ac	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  001af	d3 e0		 shl	 eax, cl
  001b1	03 f8		 add	 edi, eax
  001b3	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  001b6	83 fb 20	 cmp	 ebx, 32			; 00000020H
  001b9	72 c7		 jb	 SHORT $LL35@inflateBac
  001bb	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN32@inflateBac:

; 330  :             if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {

  001be	8b c7		 mov	 eax, edi
  001c0	0f b7 cf	 movzx	 ecx, di
  001c3	f7 d0		 not	 eax
  001c5	89 4d d8	 mov	 DWORD PTR $T4[ebp], ecx
  001c8	c1 e8 10	 shr	 eax, 16			; 00000010H
  001cb	3b c8		 cmp	 ecx, eax
  001cd	74 16		 je	 SHORT $LN266@inflateBac

; 331  :                 strm->msg = (char *)"invalid stored block lengths";

  001cf	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  001d2	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@

; 332  :                 state->mode = BAD;

  001d9	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 333  :                 break;

  001e0	e9 22 0b 00 00	 jmp	 $LN548@inflateBac
$LN266@inflateBac:

; 334  :             }
; 335  :             state->length = (unsigned)hold & 0xffff;
; 336  :             Tracev((stderr, "inflate:       stored length %u\n",
; 337  :                     state->length));
; 338  :             INITBITS();

  001e5	33 ff		 xor	 edi, edi
  001e7	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
  001ea	33 db		 xor	 ebx, ebx
  001ec	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  001ef	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 339  : 
; 340  :             /* copy stored block from input to output */
; 341  :             while (state->length != 0) {

  001f2	85 c9		 test	 ecx, ecx
  001f4	0f 84 95 00 00
	00		 je	 $LN47@inflateBac
  001fa	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
  001fd	0f 1f 00	 npad	 3
$LL46@inflateBac:

; 342  :                 copy = state->length;
; 343  :                 PULL();

  00200	85 f6		 test	 esi, esi
  00202	75 1d		 jne	 SHORT $LN48@inflateBac
  00204	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00207	50		 push	 eax
  00208	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0020b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0020e	8b f0		 mov	 esi, eax
  00210	83 c4 08	 add	 esp, 8
  00213	85 f6		 test	 esi, esi
  00215	0f 84 26 0b 00
	00		 je	 $LN371@inflateBac
  0021b	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0021e	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
$LN48@inflateBac:

; 344  :                 ROOM();

  00221	85 c0		 test	 eax, eax
  00223	75 22		 jne	 SHORT $LN51@inflateBac
  00225	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00228	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0022b	51		 push	 ecx
  0022c	50		 push	 eax
  0022d	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00230	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00233	89 4d ec	 mov	 DWORD PTR _left$1$[ebp], ecx
  00236	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  00239	ff 55 14	 call	 DWORD PTR _out$[ebp]
  0023c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0023f	85 c0		 test	 eax, eax
  00241	0f 85 f3 0a 00
	00		 jne	 $LN372@inflateBac
$LN51@inflateBac:

; 345  :                 if (copy > have) copy = have;
; 346  :                 if (copy > left) copy = left;

  00247	39 75 d8	 cmp	 DWORD PTR $T4[ebp], esi
  0024a	8b c6		 mov	 eax, esi

; 347  :                 zmemcpy(put, next, copy);

  0024c	8b 7d ec	 mov	 edi, DWORD PTR _left$1$[ebp]
  0024f	0f 46 45 d8	 cmovbe	 eax, DWORD PTR $T4[ebp]
  00253	3b c7		 cmp	 eax, edi
  00255	0f 46 f8	 cmovbe	 edi, eax
  00258	8b 45 e8	 mov	 eax, DWORD PTR _put$1$[ebp]
  0025b	57		 push	 edi
  0025c	ff 75 fc	 push	 DWORD PTR _next$[ebp]
  0025f	50		 push	 eax
  00260	e8 00 00 00 00	 call	 _memcpy

; 348  :                 have -= copy;
; 349  :                 next += copy;
; 350  :                 left -= copy;
; 351  :                 put += copy;
; 352  :                 state->length -= copy;

  00265	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00268	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026b	01 7d fc	 add	 DWORD PTR _next$[ebp], edi
  0026e	2b f7		 sub	 esi, edi
  00270	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
  00273	01 7d e8	 add	 DWORD PTR _put$1$[ebp], edi
  00276	2b c7		 sub	 eax, edi
  00278	8b 4a 44	 mov	 ecx, DWORD PTR [edx+68]
  0027b	2b cf		 sub	 ecx, edi
  0027d	89 45 ec	 mov	 DWORD PTR _left$1$[ebp], eax
  00280	89 4d d8	 mov	 DWORD PTR $T4[ebp], ecx
  00283	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
  00286	0f 85 74 ff ff
	ff		 jne	 $LL46@inflateBac
  0028c	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
$LN47@inflateBac:

; 353  :             }
; 354  :             Tracev((stderr, "inflate:       stored end\n"));
; 355  :             state->mode = TYPE;

  0028f	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 356  :             break;

  00296	e9 6c 0a 00 00	 jmp	 $LN548@inflateBac
$LN56@inflateBac:

; 357  : 
; 358  :         case TABLE:
; 359  :             /* get dynamic table entries descriptor */
; 360  :             NEEDBITS(14);

  0029b	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  0029e	73 37		 jae	 SHORT $LN54@inflateBac
$LL57@inflateBac:
  002a0	85 f6		 test	 esi, esi
  002a2	75 15		 jne	 SHORT $LN62@inflateBac
  002a4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  002a7	50		 push	 eax
  002a8	51		 push	 ecx
  002a9	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  002ac	8b f0		 mov	 esi, eax
  002ae	83 c4 08	 add	 esp, 8
  002b1	85 f6		 test	 esi, esi
  002b3	0f 84 7a 0a 00
	00		 je	 $LN369@inflateBac
$LN62@inflateBac:
  002b9	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  002bc	8b cb		 mov	 ecx, ebx
  002be	83 c3 08	 add	 ebx, 8
  002c1	4e		 dec	 esi
  002c2	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  002c5	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  002c8	d3 e0		 shl	 eax, cl
  002ca	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  002cd	03 f8		 add	 edi, eax
  002cf	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  002d2	72 cc		 jb	 SHORT $LL57@inflateBac
  002d4	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN54@inflateBac:

; 361  :             state->nlen = BITS(5) + 257;

  002d7	8b cf		 mov	 ecx, edi

; 362  :             DROPBITS(5);
; 363  :             state->ndist = BITS(5) + 1;
; 364  :             DROPBITS(5);
; 365  :             state->ncode = BITS(4) + 4;
; 366  :             DROPBITS(4);

  002d9	83 eb 0e	 sub	 ebx, 14			; 0000000eH
  002dc	c1 ef 05	 shr	 edi, 5
  002df	83 e1 1f	 and	 ecx, 31			; 0000001fH
  002e2	8b c7		 mov	 eax, edi
  002e4	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  002e7	83 e0 1f	 and	 eax, 31			; 0000001fH
  002ea	c1 ef 05	 shr	 edi, 5
  002ed	40		 inc	 eax
  002ee	81 c1 01 01 00
	00		 add	 ecx, 257		; 00000101H
  002f4	89 45 d8	 mov	 DWORD PTR tv3689[ebp], eax
  002f7	89 42 68	 mov	 DWORD PTR [edx+104], eax
  002fa	8b c7		 mov	 eax, edi
  002fc	83 e0 0f	 and	 eax, 15			; 0000000fH
  002ff	c1 ef 04	 shr	 edi, 4
  00302	83 c0 04	 add	 eax, 4
  00305	89 4a 64	 mov	 DWORD PTR [edx+100], ecx
  00308	89 42 60	 mov	 DWORD PTR [edx+96], eax
  0030b	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi

; 367  : #ifndef PKZIP_BUG_WORKAROUND
; 368  :             if (state->nlen > 286 || state->ndist > 30) {

  0030e	81 f9 1e 01 00
	00		 cmp	 ecx, 286		; 0000011eH
  00314	0f 87 ee 04 00
	00		 ja	 $LN277@inflateBac
  0031a	83 7d d8 1e	 cmp	 DWORD PTR tv3689[ebp], 30 ; 0000001eH
  0031e	0f 87 e4 04 00
	00		 ja	 $LN277@inflateBac

; 372  :             }
; 373  : #endif
; 374  :             Tracev((stderr, "inflate:       table sizes ok\n"));
; 375  : 
; 376  :             /* get code length code lengths (not a typo) */
; 377  :             state->have = 0;

  00324	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 378  :             while (state->have < state->ncode) {

  0032b	85 c0		 test	 eax, eax
  0032d	74 71		 je	 SHORT $LL90@inflateBac
  0032f	90		 npad	 1
$LL74@inflateBac:

; 379  :                 NEEDBITS(3);

  00330	83 fb 03	 cmp	 ebx, 3
  00333	73 3a		 jae	 SHORT $LN76@inflateBac
  00335	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
$LL79@inflateBac:
  00338	85 f6		 test	 esi, esi
  0033a	75 1a		 jne	 SHORT $LN84@inflateBac
  0033c	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0033f	50		 push	 eax
  00340	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00343	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00346	8b f0		 mov	 esi, eax
  00348	83 c4 08	 add	 esp, 8
  0034b	85 f6		 test	 esi, esi
  0034d	0f 84 e0 09 00
	00		 je	 $LN369@inflateBac
  00353	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
$LN84@inflateBac:
  00356	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00359	8b cb		 mov	 ecx, ebx
  0035b	d3 e0		 shl	 eax, cl
  0035d	42		 inc	 edx
  0035e	83 c3 08	 add	 ebx, 8
  00361	89 55 fc	 mov	 DWORD PTR _next$[ebp], edx
  00364	4e		 dec	 esi
  00365	03 f8		 add	 edi, eax
  00367	83 fb 03	 cmp	 ebx, 3
  0036a	72 cc		 jb	 SHORT $LL79@inflateBac
  0036c	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN76@inflateBac:

; 380  :                 state->lens[order[state->have++]] = (unsigned short)BITS(3);

  0036f	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00372	8b cf		 mov	 ecx, edi
  00374	83 e1 07	 and	 ecx, 7

; 381  :                 DROPBITS(3);

  00377	c1 ef 03	 shr	 edi, 3
  0037a	83 eb 03	 sub	 ebx, 3
  0037d	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  00385	66 89 4c 42 74	 mov	 WORD PTR [edx+eax*2+116], cx
  0038a	ff 42 6c	 inc	 DWORD PTR [edx+108]
  0038d	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00390	3b 42 60	 cmp	 eax, DWORD PTR [edx+96]
  00393	72 9b		 jb	 SHORT $LL74@inflateBac

; 382  :             }
; 383  :             while (state->have < 19)

  00395	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00398	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0039b	83 f8 13	 cmp	 eax, 19			; 00000013H
  0039e	73 1b		 jae	 SHORT $LN91@inflateBac
$LL90@inflateBac:

; 384  :                 state->lens[order[state->have++]] = 0;

  003a0	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  003a3	33 c9		 xor	 ecx, ecx
  003a5	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  003ad	66 89 4c 42 74	 mov	 WORD PTR [edx+eax*2+116], cx
  003b2	ff 42 6c	 inc	 DWORD PTR [edx+108]
  003b5	83 7a 6c 13	 cmp	 DWORD PTR [edx+108], 19	; 00000013H
  003b9	72 e5		 jb	 SHORT $LL90@inflateBac
$LN91@inflateBac:

; 385  :             state->next = state->codes;

  003bb	8d 4a 70	 lea	 ecx, DWORD PTR [edx+112]

; 386  :             state->lencode = (code const FAR *)(state->next);
; 387  :             state->lenbits = 7;

  003be	c7 42 58 07 00
	00 00		 mov	 DWORD PTR [edx+88], 7
  003c5	8d 82 34 05 00
	00		 lea	 eax, DWORD PTR [edx+1332]
  003cb	89 4d d0	 mov	 DWORD PTR tv3640[ebp], ecx
  003ce	89 01		 mov	 DWORD PTR [ecx], eax
  003d0	89 42 50	 mov	 DWORD PTR [edx+80], eax
  003d3	8d 42 58	 lea	 eax, DWORD PTR [edx+88]
  003d6	89 45 e0	 mov	 DWORD PTR tv3637[ebp], eax

; 388  :             ret = inflate_table(CODES, state->lens, 19, &(state->next),

  003d9	8d 82 f4 02 00
	00		 lea	 eax, DWORD PTR [edx+756]
  003df	50		 push	 eax
  003e0	89 45 d8	 mov	 DWORD PTR tv3635[ebp], eax
  003e3	83 c2 74	 add	 edx, 116		; 00000074H
  003e6	8b 45 e0	 mov	 eax, DWORD PTR tv3637[ebp]
  003e9	50		 push	 eax
  003ea	51		 push	 ecx
  003eb	6a 13		 push	 19			; 00000013H
  003ed	33 c9		 xor	 ecx, ecx
  003ef	89 55 d4	 mov	 DWORD PTR tv3634[ebp], edx
  003f2	e8 00 00 00 00	 call	 _inflate_table

; 389  :                                 &(state->lenbits), state->work);
; 390  :             if (ret) {

  003f7	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  003fa	83 c4 10	 add	 esp, 16			; 00000010H
  003fd	85 c0		 test	 eax, eax
  003ff	74 16		 je	 SHORT $LN280@inflateBac

; 391  :                 strm->msg = (char *)"invalid code lengths set";

  00401	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00404	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@

; 392  :                 state->mode = BAD;

  0040b	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 393  :                 break;

  00412	e9 f0 08 00 00	 jmp	 $LN548@inflateBac
$LN280@inflateBac:

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  00417	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  0041a	8b 4a 64	 mov	 ecx, DWORD PTR [edx+100]
  0041d	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0
  00424	03 c1		 add	 eax, ecx
  00426	0f 84 78 02 00
	00		 je	 $LN93@inflateBac
  0042c	0f 1f 40 00	 npad	 4
$LL92@inflateBac:

; 400  :                 for (;;) {
; 401  :                     here = state->lencode[BITS(state->lenbits)];

  00430	8b 45 e0	 mov	 eax, DWORD PTR tv3637[ebp]
  00433	ba 01 00 00 00	 mov	 edx, 1
  00438	8b 08		 mov	 ecx, DWORD PTR [eax]
  0043a	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  0043d	d3 e2		 shl	 edx, cl
  0043f	4a		 dec	 edx
  00440	23 d7		 and	 edx, edi

; 402  :                     if ((unsigned)(here.bits) <= bits) break;

  00442	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
  00445	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00448	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0044b	8b c8		 mov	 ecx, eax
  0044d	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00450	8b d0		 mov	 edx, eax
  00452	c1 ea 08	 shr	 edx, 8
  00455	89 4d dc	 mov	 DWORD PTR $T6[ebp], ecx
  00458	0f b6 ca	 movzx	 ecx, dl
  0045b	89 45 e4	 mov	 DWORD PTR _here$1$[ebp], eax
  0045e	3b cb		 cmp	 ecx, ebx
  00460	76 60		 jbe	 SHORT $LN375@inflateBac
$LL94@inflateBac:

; 403  :                     PULLBYTE();

  00462	85 f6		 test	 esi, esi
  00464	75 1a		 jne	 SHORT $LN100@inflateBac
  00466	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00469	50		 push	 eax
  0046a	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0046d	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00470	8b f0		 mov	 esi, eax
  00472	83 c4 08	 add	 esp, 8
  00475	85 f6		 test	 esi, esi
  00477	0f 84 b6 08 00
	00		 je	 $LN369@inflateBac
  0047d	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN100@inflateBac:
  00480	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00483	8b cb		 mov	 ecx, ebx
  00485	d3 e0		 shl	 eax, cl
  00487	47		 inc	 edi
  00488	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  0048b	ba 01 00 00 00	 mov	 edx, 1
  00490	8b 45 e0	 mov	 eax, DWORD PTR tv3637[ebp]
  00493	83 c3 08	 add	 ebx, 8
  00496	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00499	4e		 dec	 esi
  0049a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0049c	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  0049f	d3 e2		 shl	 edx, cl
  004a1	4a		 dec	 edx
  004a2	23 55 f8	 and	 edx, DWORD PTR _hold$1$[ebp]
  004a5	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  004a8	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  004ab	8b c8		 mov	 ecx, eax
  004ad	c1 e9 10	 shr	 ecx, 16			; 00000010H
  004b0	8b d0		 mov	 edx, eax
  004b2	c1 ea 08	 shr	 edx, 8
  004b5	89 4d dc	 mov	 DWORD PTR $T6[ebp], ecx
  004b8	0f b6 ca	 movzx	 ecx, dl
  004bb	89 45 e4	 mov	 DWORD PTR _here$1$[ebp], eax
  004be	3b cb		 cmp	 ecx, ebx
  004c0	77 a0		 ja	 SHORT $LL94@inflateBac
$LN375@inflateBac:

; 404  :                 }
; 405  :                 if (here.val < 16) {

  004c2	8b 4d dc	 mov	 ecx, DWORD PTR $T6[ebp]
  004c5	0f b7 c9	 movzx	 ecx, cx
  004c8	89 4d dc	 mov	 DWORD PTR tv3574[ebp], ecx
  004cb	0f b7 c9	 movzx	 ecx, cx
  004ce	83 f9 10	 cmp	 ecx, 16			; 00000010H
  004d1	73 29		 jae	 SHORT $LN284@inflateBac

; 406  :                     DROPBITS(here.bits);

  004d3	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  004d6	0f b6 ca	 movzx	 ecx, dl

; 407  :                     state->lens[state->have++] = here.val;

  004d9	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  004dc	2b d9		 sub	 ebx, ecx
  004de	d3 ef		 shr	 edi, cl
  004e0	c1 e8 10	 shr	 eax, 16			; 00000010H
  004e3	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  004e6	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  004e9	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  004ec	66 89 44 4a 74	 mov	 WORD PTR [edx+ecx*2+116], ax
  004f1	ff 42 6c	 inc	 DWORD PTR [edx+108]
  004f4	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]

; 408  :                 }

  004f7	e9 91 01 00 00	 jmp	 $LN406@inflateBac
$LN284@inflateBac:

; 409  :                 else {
; 410  :                     if (here.val == 16) {

  004fc	0f b6 c2	 movzx	 eax, dl
  004ff	0f 85 7f 00 00
	00		 jne	 $LN286@inflateBac

; 411  :                         NEEDBITS(here.bits + 2);

  00505	83 c0 02	 add	 eax, 2
  00508	89 45 dc	 mov	 DWORD PTR tv3625[ebp], eax
  0050b	3b d8		 cmp	 ebx, eax
  0050d	73 36		 jae	 SHORT $LN106@inflateBac
  0050f	90		 npad	 1
$LL109@inflateBac:
  00510	85 f6		 test	 esi, esi
  00512	75 1a		 jne	 SHORT $LN114@inflateBac
  00514	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00517	50		 push	 eax
  00518	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0051b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0051e	8b f0		 mov	 esi, eax
  00520	83 c4 08	 add	 esp, 8
  00523	85 f6		 test	 esi, esi
  00525	0f 84 08 08 00
	00		 je	 $LN369@inflateBac
  0052b	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN114@inflateBac:
  0052e	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00531	8b cb		 mov	 ecx, ebx
  00533	d3 e0		 shl	 eax, cl
  00535	47		 inc	 edi
  00536	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  00539	83 c3 08	 add	 ebx, 8
  0053c	4e		 dec	 esi
  0053d	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00540	3b 5d dc	 cmp	 ebx, DWORD PTR tv3625[ebp]
  00543	72 cb		 jb	 SHORT $LL109@inflateBac
$LN106@inflateBac:

; 412  :                         DROPBITS(here.bits);
; 413  :                         if (state->have == 0) {

  00545	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00548	8b 45 e4	 mov	 eax, DWORD PTR _here$1$[ebp]
  0054b	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  0054e	0f b6 cc	 movzx	 ecx, ah
  00551	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00554	2b d9		 sub	 ebx, ecx
  00556	d3 ef		 shr	 edi, cl
  00558	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  0055b	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0055e	85 c0		 test	 eax, eax
  00560	0f 84 6b 01 00
	00		 je	 $LN380@inflateBac

; 414  :                             strm->msg = (char *)"invalid bit length repeat";
; 415  :                             state->mode = BAD;
; 416  :                             break;
; 417  :                         }
; 418  :                         len = (unsigned)(state->lens[state->have - 1]);
; 419  :                         copy = 3 + BITS(2);
; 420  :                         DROPBITS(2);

  00566	0f b7 44 42 72	 movzx	 eax, WORD PTR [edx+eax*2+114]
  0056b	8b cf		 mov	 ecx, edi
  0056d	83 e1 03	 and	 ecx, 3
  00570	c1 ef 02	 shr	 edi, 2
  00573	83 c1 03	 add	 ecx, 3
  00576	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax
  00579	89 4d e4	 mov	 DWORD PTR _copy$1$[ebp], ecx
  0057c	83 eb 02	 sub	 ebx, 2

; 421  :                     }

  0057f	e9 d1 00 00 00	 jmp	 $LN583@inflateBac
$LN286@inflateBac:

; 422  :                     else if (here.val == 17) {

  00584	66 83 7d dc 11	 cmp	 WORD PTR tv3574[ebp], 17 ; 00000011H
  00589	75 5f		 jne	 SHORT $LN142@inflateBac

; 423  :                         NEEDBITS(here.bits + 3);

  0058b	83 c0 03	 add	 eax, 3
  0058e	89 45 dc	 mov	 DWORD PTR tv3585[ebp], eax
  00591	3b d8		 cmp	 ebx, eax
  00593	73 35		 jae	 SHORT $LN123@inflateBac
$LL126@inflateBac:
  00595	85 f6		 test	 esi, esi
  00597	75 1a		 jne	 SHORT $LN131@inflateBac
  00599	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0059c	50		 push	 eax
  0059d	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  005a0	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  005a3	8b f0		 mov	 esi, eax
  005a5	83 c4 08	 add	 esp, 8
  005a8	85 f6		 test	 esi, esi
  005aa	0f 84 83 07 00
	00		 je	 $LN369@inflateBac
  005b0	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN131@inflateBac:
  005b3	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  005b6	8b cb		 mov	 ecx, ebx
  005b8	d3 e0		 shl	 eax, cl
  005ba	47		 inc	 edi
  005bb	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  005be	83 c3 08	 add	 ebx, 8
  005c1	4e		 dec	 esi
  005c2	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  005c5	3b 5d dc	 cmp	 ebx, DWORD PTR tv3585[ebp]
  005c8	72 cb		 jb	 SHORT $LL126@inflateBac
$LN123@inflateBac:

; 424  :                         DROPBITS(here.bits);

  005ca	8b 45 e4	 mov	 eax, DWORD PTR _here$1$[ebp]
  005cd	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  005d0	0f b6 cc	 movzx	 ecx, ah
  005d3	d3 ef		 shr	 edi, cl

; 425  :                         len = 0;
; 426  :                         copy = 3 + BITS(3);

  005d5	8b c7		 mov	 eax, edi
  005d7	83 e0 07	 and	 eax, 7
  005da	83 c0 03	 add	 eax, 3

; 427  :                         DROPBITS(3);

  005dd	c1 ef 03	 shr	 edi, 3
  005e0	89 45 e4	 mov	 DWORD PTR _copy$1$[ebp], eax
  005e3	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH

; 428  :                     }

  005e8	eb 5d		 jmp	 SHORT $LN584@inflateBac
$LN142@inflateBac:

; 429  :                     else {
; 430  :                         NEEDBITS(here.bits + 7);

  005ea	83 c0 07	 add	 eax, 7
  005ed	89 45 dc	 mov	 DWORD PTR tv3584[ebp], eax
  005f0	3b d8		 cmp	 ebx, eax
  005f2	73 35		 jae	 SHORT $LN140@inflateBac
$LL143@inflateBac:
  005f4	85 f6		 test	 esi, esi
  005f6	75 1a		 jne	 SHORT $LN148@inflateBac
  005f8	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  005fb	50		 push	 eax
  005fc	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  005ff	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00602	8b f0		 mov	 esi, eax
  00604	83 c4 08	 add	 esp, 8
  00607	85 f6		 test	 esi, esi
  00609	0f 84 24 07 00
	00		 je	 $LN369@inflateBac
  0060f	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN148@inflateBac:
  00612	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00615	8b cb		 mov	 ecx, ebx
  00617	d3 e0		 shl	 eax, cl
  00619	47		 inc	 edi
  0061a	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  0061d	83 c3 08	 add	 ebx, 8
  00620	4e		 dec	 esi
  00621	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00624	3b 5d dc	 cmp	 ebx, DWORD PTR tv3584[ebp]
  00627	72 cb		 jb	 SHORT $LL143@inflateBac
$LN140@inflateBac:

; 431  :                         DROPBITS(here.bits);

  00629	8b 45 e4	 mov	 eax, DWORD PTR _here$1$[ebp]
  0062c	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  0062f	0f b6 cc	 movzx	 ecx, ah
  00632	d3 ef		 shr	 edi, cl

; 432  :                         len = 0;
; 433  :                         copy = 11 + BITS(7);

  00634	8b c7		 mov	 eax, edi
  00636	83 e0 7f	 and	 eax, 127		; 0000007fH
  00639	83 c0 0b	 add	 eax, 11			; 0000000bH

; 434  :                         DROPBITS(7);

  0063c	c1 ef 07	 shr	 edi, 7
  0063f	89 45 e4	 mov	 DWORD PTR _copy$1$[ebp], eax
  00642	b8 f9 ff ff ff	 mov	 eax, -7			; fffffff9H
$LN584@inflateBac:

; 435  :                     }
; 436  :                     if (state->have + copy > state->nlen + state->ndist) {

  00647	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  0064a	2b c1		 sub	 eax, ecx
  0064c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0
  00653	03 d8		 add	 ebx, eax
$LN583@inflateBac:
  00655	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00658	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  0065b	03 4d e4	 add	 ecx, DWORD PTR _copy$1$[ebp]
  0065e	03 42 64	 add	 eax, DWORD PTR [edx+100]
  00661	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00664	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00667	3b c8		 cmp	 ecx, eax
  00669	77 66		 ja	 SHORT $LN380@inflateBac
  0066b	8b 7d e4	 mov	 edi, DWORD PTR _copy$1$[ebp]
  0066e	8b 5d dc	 mov	 ebx, DWORD PTR $T5[ebp]
$LL157@inflateBac:

; 437  :                         strm->msg = (char *)"invalid bit length repeat";
; 438  :                         state->mode = BAD;
; 439  :                         break;
; 440  :                     }
; 441  :                     while (copy--)
; 442  :                         state->lens[state->have++] = (unsigned short)len;

  00671	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00674	66 89 5c 42 74	 mov	 WORD PTR [edx+eax*2+116], bx
  00679	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0067c	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0067f	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx
  00682	83 ef 01	 sub	 edi, 1
  00685	75 ea		 jne	 SHORT $LL157@inflateBac
  00687	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  0068a	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
$LN406@inflateBac:

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  0068d	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  00690	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
  00693	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00696	03 45 dc	 add	 eax, DWORD PTR $T7[ebp]
  00699	3b c8		 cmp	 ecx, eax
  0069b	0f 82 8f fd ff
	ff		 jb	 $LL92@inflateBac

; 513  :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 514  :                         "inflate:         literal '%c'\n" :
; 515  :                         "inflate:         literal 0x%02x\n", here.val));
; 516  :                 ROOM();

  006a1	8b 4a 64	 mov	 ecx, DWORD PTR [edx+100]
$LN93@inflateBac:

; 443  :                 }
; 444  :             }
; 445  : 
; 446  :             /* handle error breaks in while */
; 447  :             if (state->mode == BAD) break;

  006a4	81 7a 04 51 3f
	00 00		 cmp	 DWORD PTR [edx+4], 16209 ; 00003f51H
  006ab	0f 84 56 06 00
	00		 je	 $LN548@inflateBac

; 448  : 
; 449  :             /* check for end-of-block code (better have one) */
; 450  :             if (state->lens[256] == 0) {

  006b1	66 83 ba 74 02
	00 00 00	 cmp	 WORD PTR [edx+628], 0
  006b9	75 2c		 jne	 SHORT $LN299@inflateBac

; 451  :                 strm->msg = (char *)"invalid code -- missing end-of-block";

  006bb	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  006be	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@

; 452  :                 state->mode = BAD;

  006c5	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 453  :                 break;

  006cc	e9 36 06 00 00	 jmp	 $LN548@inflateBac
$LN380@inflateBac:

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  006d1	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  006d4	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@
  006db	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H
  006e2	e9 20 06 00 00	 jmp	 $LN548@inflateBac
$LN299@inflateBac:

; 454  :             }
; 455  : 
; 456  :             /* build code tables -- note: do not change the lenbits or distbits
; 457  :                values here (9 and 6) without reading the comments in inftrees.h
; 458  :                concerning the ENOUGH constants, which depend on those values */
; 459  :             state->next = state->codes;
; 460  :             state->lencode = (code const FAR *)(state->next);
; 461  :             state->lenbits = 9;
; 462  :             ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),

  006e7	ff 75 d8	 push	 DWORD PTR tv3635[ebp]
  006ea	8d 82 34 05 00
	00		 lea	 eax, DWORD PTR [edx+1332]
  006f0	c7 42 58 09 00
	00 00		 mov	 DWORD PTR [edx+88], 9
  006f7	89 42 70	 mov	 DWORD PTR [edx+112], eax
  006fa	89 42 50	 mov	 DWORD PTR [edx+80], eax
  006fd	8d 42 58	 lea	 eax, DWORD PTR [edx+88]
  00700	50		 push	 eax
  00701	8d 42 70	 lea	 eax, DWORD PTR [edx+112]
  00704	8b 55 d4	 mov	 edx, DWORD PTR tv3634[ebp]
  00707	50		 push	 eax
  00708	51		 push	 ecx
  00709	b9 01 00 00 00	 mov	 ecx, 1
  0070e	e8 00 00 00 00	 call	 _inflate_table
  00713	83 c4 10	 add	 esp, 16			; 00000010H

; 463  :                                 &(state->lenbits), state->work);
; 464  :             if (ret) {

  00716	85 c0		 test	 eax, eax
  00718	74 19		 je	 SHORT $LN300@inflateBac

; 465  :                 strm->msg = (char *)"invalid literal/lengths set";

  0071a	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]

; 466  :                 state->mode = BAD;

  0071d	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00720	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@
  00727	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 467  :                 break;

  0072e	e9 d4 05 00 00	 jmp	 $LN548@inflateBac
$LN300@inflateBac:

; 468  :             }
; 469  :             state->distcode = (code const FAR *)(state->next);

  00733	8b 4d f4	 mov	 ecx, DWORD PTR _state$1$[ebp]
  00736	8b 55 d0	 mov	 edx, DWORD PTR tv3640[ebp]

; 470  :             state->distbits = 6;
; 471  :             ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,

  00739	ff 75 d8	 push	 DWORD PTR tv3635[ebp]
  0073c	c7 41 5c 06 00
	00 00		 mov	 DWORD PTR [ecx+92], 6
  00743	8b 02		 mov	 eax, DWORD PTR [edx]
  00745	89 41 54	 mov	 DWORD PTR [ecx+84], eax
  00748	8d 41 5c	 lea	 eax, DWORD PTR [ecx+92]
  0074b	50		 push	 eax
  0074c	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  0074f	52		 push	 edx
  00750	ff 71 68	 push	 DWORD PTR [ecx+104]
  00753	83 c1 74	 add	 ecx, 116		; 00000074H
  00756	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00759	b9 02 00 00 00	 mov	 ecx, 2
  0075e	e8 00 00 00 00	 call	 _inflate_table

; 472  :                             &(state->next), &(state->distbits), state->work);
; 473  :             if (ret) {

  00763	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00766	83 c4 10	 add	 esp, 16			; 00000010H
  00769	85 c0		 test	 eax, eax
  0076b	74 16		 je	 SHORT $LN301@inflateBac

; 474  :                 strm->msg = (char *)"invalid distances set";

  0076d	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00770	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@GMDFCBGP@invalid?5distances?5set@

; 475  :                 state->mode = BAD;

  00777	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 476  :                 break;

  0077e	e9 84 05 00 00	 jmp	 $LN548@inflateBac
$LN301@inflateBac:

; 477  :             }
; 478  :             Tracev((stderr, "inflate:       codes ok\n"));
; 479  :             state->mode = LEN;

  00783	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H
$LN302@inflateBac:

; 480  : 
; 481  :         case LEN:
; 482  :             /* use inflate_fast() if we have enough input and output */
; 483  :             if (have >= 6 && left >= 258) {

  0078a	83 fe 06	 cmp	 esi, 6
  0078d	0f 82 8b 00 00
	00		 jb	 $LN303@inflateBac
  00793	8b 4d ec	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00796	81 f9 02 01 00
	00		 cmp	 ecx, 258		; 00000102H
  0079c	0f 82 7c 00 00
	00		 jb	 $LN303@inflateBac

; 484  :                 RESTORE();

  007a2	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  007a5	8b 45 e8	 mov	 eax, DWORD PTR _put$1$[ebp]
  007a8	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  007ab	8b c2		 mov	 eax, edx
  007ad	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  007b0	8b ca		 mov	 ecx, edx
  007b2	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  007b5	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  007b8	89 01		 mov	 DWORD PTR [ecx], eax
  007ba	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 485  :                 if (state->whave < state->wsize)

  007bd	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  007c0	89 7a 3c	 mov	 DWORD PTR [edx+60], edi
  007c3	89 5a 40	 mov	 DWORD PTR [edx+64], ebx
  007c6	39 4a 30	 cmp	 DWORD PTR [edx+48], ecx
  007c9	73 08		 jae	 SHORT $LN304@inflateBac

; 486  :                     state->whave = state->wsize - left;

  007cb	8b c1		 mov	 eax, ecx
  007cd	2b 45 ec	 sub	 eax, DWORD PTR _left$1$[ebp]
  007d0	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN304@inflateBac:

; 487  :                 inflate_fast(strm, state->wsize);

  007d3	8b d1		 mov	 edx, ecx
  007d5	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  007d8	e8 00 00 00 00	 call	 _inflate_fast

; 488  :                 LOAD();

  007dd	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  007e0	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  007e3	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  007e6	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  007e9	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  007ec	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  007ef	89 45 ec	 mov	 DWORD PTR _left$1$[ebp], eax
  007f2	8b 01		 mov	 eax, DWORD PTR [ecx]
  007f4	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  007f7	8b 7a 3c	 mov	 edi, DWORD PTR [edx+60]
  007fa	8b 5a 40	 mov	 ebx, DWORD PTR [edx+64]
  007fd	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00800	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 489  :                 break;

  00803	e9 ff 04 00 00	 jmp	 $LN548@inflateBac
$LN277@inflateBac:

; 369  :                 strm->msg = (char *)"too many length or distance symbols";

  00808	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0080b	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@

; 370  :                 state->mode = BAD;

  00812	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 371  :                 break;

  00819	e9 e9 04 00 00	 jmp	 $LN548@inflateBac
$LN303@inflateBac:

; 490  :             }
; 491  : 
; 492  :             /* get a literal, length, or end-of-block code */
; 493  :             for (;;) {
; 494  :                 here = state->lencode[BITS(state->lenbits)];

  0081e	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00821	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00824	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
  00827	b8 01 00 00 00	 mov	 eax, 1
  0082c	d3 e0		 shl	 eax, cl
  0082e	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  00831	48		 dec	 eax
  00832	23 c7		 and	 eax, edi
  00834	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00837	8b c8		 mov	 ecx, eax
  00839	c1 e9 08	 shr	 ecx, 8
  0083c	0f b6 c9	 movzx	 ecx, cl

; 495  :                 if ((unsigned)(here.bits) <= bits) break;

  0083f	3b cb		 cmp	 ecx, ebx
  00841	76 5c		 jbe	 SHORT $LN382@inflateBac
$LL165@inflateBac:

; 496  :                 PULLBYTE();

  00843	85 f6		 test	 esi, esi
  00845	75 1a		 jne	 SHORT $LN171@inflateBac
  00847	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0084a	50		 push	 eax
  0084b	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0084e	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00851	8b f0		 mov	 esi, eax
  00853	83 c4 08	 add	 esp, 8
  00856	85 f6		 test	 esi, esi
  00858	0f 84 d5 04 00
	00		 je	 $LN369@inflateBac
  0085e	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN171@inflateBac:
  00861	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00864	8b cb		 mov	 ecx, ebx
  00866	83 c3 08	 add	 ebx, 8
  00869	4e		 dec	 esi
  0086a	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0086d	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00870	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00873	d3 e0		 shl	 eax, cl
  00875	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00878	03 f8		 add	 edi, eax
  0087a	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0087d	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
  00880	b8 01 00 00 00	 mov	 eax, 1
  00885	d3 e0		 shl	 eax, cl
  00887	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  0088a	48		 dec	 eax
  0088b	23 c7		 and	 eax, edi
  0088d	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00890	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00893	8b c8		 mov	 ecx, eax
  00895	c1 e9 08	 shr	 ecx, 8
  00898	0f b6 c9	 movzx	 ecx, cl
  0089b	3b cb		 cmp	 ecx, ebx
  0089d	77 a4		 ja	 SHORT $LL165@inflateBac
$LN382@inflateBac:

; 497  :             }
; 498  :             if (here.op && (here.op & 0xf0) == 0) {

  0089f	84 c0		 test	 al, al
  008a1	0f 84 c2 00 00
	00		 je	 $LN184@inflateBac
  008a7	a8 f0		 test	 al, 240			; 000000f0H
  008a9	0f 85 ba 00 00
	00		 jne	 $LN184@inflateBac

; 499  :                 last = here;

  008af	8b c8		 mov	 ecx, eax

; 500  :                 for (;;) {
; 501  :                     here = state->lencode[last.val +

  008b1	bf 01 00 00 00	 mov	 edi, 1
  008b6	c1 e9 08	 shr	 ecx, 8
  008b9	8b d0		 mov	 edx, eax
  008bb	0f b6 d9	 movzx	 ebx, cl
  008be	0f b6 c8	 movzx	 ecx, al
  008c1	03 cb		 add	 ecx, ebx
  008c3	c1 e8 10	 shr	 eax, 16			; 00000010H
  008c6	d3 e7		 shl	 edi, cl
  008c8	8b cb		 mov	 ecx, ebx
  008ca	4f		 dec	 edi
  008cb	89 55 e4	 mov	 DWORD PTR _last$[ebp], edx
  008ce	23 7d f8	 and	 edi, DWORD PTR _hold$1$[ebp]
  008d1	d3 ef		 shr	 edi, cl
  008d3	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
  008d6	03 f8		 add	 edi, eax
  008d8	8b 04 b9	 mov	 eax, DWORD PTR [ecx+edi*4]
  008db	8b c8		 mov	 ecx, eax
  008dd	c1 e9 08	 shr	 ecx, 8

; 502  :                             (BITS(last.bits + last.op) >> last.bits)];
; 503  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  008e0	0f b6 c9	 movzx	 ecx, cl
  008e3	03 cb		 add	 ecx, ebx
  008e5	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  008e8	3b cb		 cmp	 ecx, ebx
  008ea	0f 86 6c 00 00
	00		 jbe	 $LN185@inflateBac
$LL174@inflateBac:

; 504  :                     PULLBYTE();

  008f0	85 f6		 test	 esi, esi
  008f2	75 1a		 jne	 SHORT $LN180@inflateBac
  008f4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  008f7	50		 push	 eax
  008f8	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  008fb	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  008fe	8b f0		 mov	 esi, eax
  00900	83 c4 08	 add	 esp, 8
  00903	85 f6		 test	 esi, esi
  00905	0f 84 28 04 00
	00		 je	 $LN369@inflateBac
  0090b	8b 55 e4	 mov	 edx, DWORD PTR _last$[ebp]
$LN180@inflateBac:
  0090e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00911	8b cb		 mov	 ecx, ebx
  00913	83 c3 08	 add	 ebx, 8
  00916	bf 01 00 00 00	 mov	 edi, 1
  0091b	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0091e	4e		 dec	 esi
  0091f	0f b6 de	 movzx	 ebx, dh
  00922	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00925	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00928	d3 e0		 shl	 eax, cl
  0092a	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  0092d	0f b7 45 e6	 movzx	 eax, WORD PTR _last$[ebp+2]
  00931	0f b6 ca	 movzx	 ecx, dl
  00934	03 cb		 add	 ecx, ebx
  00936	d3 e7		 shl	 edi, cl
  00938	8b cb		 mov	 ecx, ebx
  0093a	4f		 dec	 edi
  0093b	23 7d f8	 and	 edi, DWORD PTR _hold$1$[ebp]
  0093e	d3 ef		 shr	 edi, cl
  00940	03 f8		 add	 edi, eax
  00942	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00945	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00948	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  0094b	8b c8		 mov	 ecx, eax
  0094d	c1 e9 08	 shr	 ecx, 8
  00950	0f b6 c9	 movzx	 ecx, cl
  00953	03 cb		 add	 ecx, ebx
  00955	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00958	3b cb		 cmp	 ecx, ebx
  0095a	77 94		 ja	 SHORT $LL174@inflateBac
$LN185@inflateBac:

; 505  :                 }
; 506  :                 DROPBITS(last.bits);

  0095c	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  0095f	0f b6 ce	 movzx	 ecx, dh
  00962	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00965	d3 ef		 shr	 edi, cl
  00967	2b d9		 sub	 ebx, ecx
$LN184@inflateBac:

; 507  :             }
; 508  :             DROPBITS(here.bits);

  00969	8b c8		 mov	 ecx, eax
  0096b	c1 e9 08	 shr	 ecx, 8
  0096e	0f b6 c9	 movzx	 ecx, cl
  00971	d3 ef		 shr	 edi, cl
  00973	2b d9		 sub	 ebx, ecx

; 509  :             state->length = (unsigned)here.val;

  00975	8b c8		 mov	 ecx, eax
  00977	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  0097a	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0097d	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00980	89 4a 44	 mov	 DWORD PTR [edx+68], ecx

; 510  : 
; 511  :             /* process literal */
; 512  :             if (here.op == 0) {

  00983	84 c0		 test	 al, al
  00985	75 46		 jne	 SHORT $LN312@inflateBac

; 513  :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 514  :                         "inflate:         literal '%c'\n" :
; 515  :                         "inflate:         literal 0x%02x\n", here.val));
; 516  :                 ROOM();

  00987	83 7d ec 00	 cmp	 DWORD PTR _left$1$[ebp], 0
  0098b	75 25		 jne	 SHORT $LN189@inflateBac
  0098d	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00990	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00993	51		 push	 ecx
  00994	50		 push	 eax
  00995	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00998	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  0099b	89 4d ec	 mov	 DWORD PTR _left$1$[ebp], ecx
  0099e	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  009a1	ff 55 14	 call	 DWORD PTR _out$[ebp]
  009a4	83 c4 0c	 add	 esp, 12			; 0000000cH
  009a7	85 c0		 test	 eax, eax
  009a9	0f 85 8b 03 00
	00		 jne	 $LN372@inflateBac
  009af	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN189@inflateBac:

; 517  :                 *put++ = (unsigned char)(state->length);

  009b2	8b 4d e8	 mov	 ecx, DWORD PTR _put$1$[ebp]
  009b5	8a 42 44	 mov	 al, BYTE PTR [edx+68]
  009b8	88 01		 mov	 BYTE PTR [ecx], al
  009ba	41		 inc	 ecx

; 518  :                 left--;

  009bb	ff 4d ec	 dec	 DWORD PTR _left$1$[ebp]
  009be	89 4d e8	 mov	 DWORD PTR _put$1$[ebp], ecx

; 519  :                 state->mode = LEN;

  009c1	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H

; 520  :                 break;

  009c8	e9 3a 03 00 00	 jmp	 $LN548@inflateBac
$LN312@inflateBac:

; 521  :             }
; 522  : 
; 523  :             /* process end of block */
; 524  :             if (here.op & 32) {

  009cd	a8 20		 test	 al, 32			; 00000020H
  009cf	74 0c		 je	 SHORT $LN315@inflateBac

; 525  :                 Tracevv((stderr, "inflate:         end of block\n"));
; 526  :                 state->mode = TYPE;

  009d1	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 527  :                 break;

  009d8	e9 2a 03 00 00	 jmp	 $LN548@inflateBac
$LN315@inflateBac:

; 528  :             }
; 529  : 
; 530  :             /* invalid code */
; 531  :             if (here.op & 64) {

  009dd	a8 40		 test	 al, 64			; 00000040H
  009df	74 16		 je	 SHORT $LN316@inflateBac

; 532  :                 strm->msg = (char *)"invalid literal/length code";

  009e1	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  009e4	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@

; 533  :                 state->mode = BAD;

  009eb	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 534  :                 break;

  009f2	e9 10 03 00 00	 jmp	 $LN548@inflateBac
$LN316@inflateBac:

; 535  :             }
; 536  : 
; 537  :             /* length code -- get extra bits, if any */
; 538  :             state->extra = (unsigned)(here.op) & 15;

  009f7	0f b6 c8	 movzx	 ecx, al
  009fa	83 e1 0f	 and	 ecx, 15			; 0000000fH
  009fd	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 539  :             if (state->extra != 0) {

  00a00	74 61		 je	 SHORT $LN204@inflateBac

; 540  :                 NEEDBITS(state->extra);

  00a02	3b d9		 cmp	 ebx, ecx
  00a04	73 46		 jae	 SHORT $LN192@inflateBac
  00a06	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00a09	0f 1f 80 00 00
	00 00		 npad	 7
$LL195@inflateBac:
  00a10	85 f6		 test	 esi, esi
  00a12	75 1d		 jne	 SHORT $LN200@inflateBac
  00a14	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00a17	50		 push	 eax
  00a18	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00a1b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00a1e	8b f0		 mov	 esi, eax
  00a20	83 c4 08	 add	 esp, 8
  00a23	85 f6		 test	 esi, esi
  00a25	0f 84 08 03 00
	00		 je	 $LN369@inflateBac
  00a2b	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00a2e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LN200@inflateBac:
  00a31	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00a34	8b cb		 mov	 ecx, ebx
  00a36	d3 e0		 shl	 eax, cl
  00a38	83 c3 08	 add	 ebx, 8
  00a3b	03 f8		 add	 edi, eax
  00a3d	4e		 dec	 esi
  00a3e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00a41	40		 inc	 eax
  00a42	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00a45	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  00a48	3b d9		 cmp	 ebx, ecx
  00a4a	72 c4		 jb	 SHORT $LL195@inflateBac
$LN192@inflateBac:

; 541  :                 state->length += BITS(state->extra);

  00a4c	b8 01 00 00 00	 mov	 eax, 1
  00a51	d3 e0		 shl	 eax, cl
  00a53	48		 dec	 eax
  00a54	23 c7		 and	 eax, edi

; 542  :                 DROPBITS(state->extra);

  00a56	d3 ef		 shr	 edi, cl
  00a58	01 42 44	 add	 DWORD PTR [edx+68], eax
  00a5b	2b d9		 sub	 ebx, ecx
  00a5d	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00a60	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
$LN204@inflateBac:

; 543  :             }
; 544  :             Tracevv((stderr, "inflate:         length %u\n", state->length));
; 545  : 
; 546  :             /* get distance code */
; 547  :             for (;;) {
; 548  :                 here = state->distcode[BITS(state->distbits)];

  00a63	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00a66	8b 4a 5c	 mov	 ecx, DWORD PTR [edx+92]
  00a69	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
  00a6c	b8 01 00 00 00	 mov	 eax, 1
  00a71	d3 e0		 shl	 eax, cl
  00a73	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00a76	48		 dec	 eax
  00a77	23 c7		 and	 eax, edi
  00a79	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00a7c	8b c8		 mov	 ecx, eax
  00a7e	c1 e9 08	 shr	 ecx, 8
  00a81	0f b6 c9	 movzx	 ecx, cl

; 549  :                 if ((unsigned)(here.bits) <= bits) break;

  00a84	3b cb		 cmp	 ecx, ebx
  00a86	76 5c		 jbe	 SHORT $LN547@inflateBac
$LL206@inflateBac:

; 550  :                 PULLBYTE();

  00a88	85 f6		 test	 esi, esi
  00a8a	75 1a		 jne	 SHORT $LN212@inflateBac
  00a8c	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00a8f	50		 push	 eax
  00a90	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00a93	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00a96	8b f0		 mov	 esi, eax
  00a98	83 c4 08	 add	 esp, 8
  00a9b	85 f6		 test	 esi, esi
  00a9d	0f 84 90 02 00
	00		 je	 $LN369@inflateBac
  00aa3	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN212@inflateBac:
  00aa6	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00aa9	8b cb		 mov	 ecx, ebx
  00aab	83 c3 08	 add	 ebx, 8
  00aae	4e		 dec	 esi
  00aaf	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00ab2	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00ab5	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00ab8	d3 e0		 shl	 eax, cl
  00aba	8b 4a 5c	 mov	 ecx, DWORD PTR [edx+92]
  00abd	03 f8		 add	 edi, eax
  00abf	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00ac2	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
  00ac5	b8 01 00 00 00	 mov	 eax, 1
  00aca	d3 e0		 shl	 eax, cl
  00acc	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00acf	48		 dec	 eax
  00ad0	23 c7		 and	 eax, edi
  00ad2	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00ad5	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00ad8	8b c8		 mov	 ecx, eax
  00ada	c1 e9 08	 shr	 ecx, 8
  00add	0f b6 c9	 movzx	 ecx, cl
  00ae0	3b cb		 cmp	 ecx, ebx
  00ae2	77 a4		 ja	 SHORT $LL206@inflateBac
$LN547@inflateBac:

; 551  :             }
; 552  :             if ((here.op & 0xf0) == 0) {

  00ae4	a8 f0		 test	 al, 240			; 000000f0H
  00ae6	0f 85 be 00 00
	00		 jne	 $LN225@inflateBac

; 553  :                 last = here;

  00aec	8b c8		 mov	 ecx, eax

; 554  :                 for (;;) {
; 555  :                     here = state->distcode[last.val +

  00aee	bf 01 00 00 00	 mov	 edi, 1
  00af3	c1 e9 08	 shr	 ecx, 8
  00af6	8b d0		 mov	 edx, eax
  00af8	0f b6 d9	 movzx	 ebx, cl
  00afb	0f b6 c8	 movzx	 ecx, al
  00afe	03 cb		 add	 ecx, ebx
  00b00	c1 e8 10	 shr	 eax, 16			; 00000010H
  00b03	d3 e7		 shl	 edi, cl
  00b05	8b cb		 mov	 ecx, ebx
  00b07	4f		 dec	 edi
  00b08	89 55 e4	 mov	 DWORD PTR _last$[ebp], edx
  00b0b	23 7d f8	 and	 edi, DWORD PTR _hold$1$[ebp]
  00b0e	d3 ef		 shr	 edi, cl
  00b10	8b 4d d8	 mov	 ecx, DWORD PTR $T2[ebp]
  00b13	03 f8		 add	 edi, eax
  00b15	8b 04 b9	 mov	 eax, DWORD PTR [ecx+edi*4]
  00b18	8b c8		 mov	 ecx, eax
  00b1a	c1 e9 08	 shr	 ecx, 8

; 556  :                             (BITS(last.bits + last.op) >> last.bits)];
; 557  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  00b1d	0f b6 c9	 movzx	 ecx, cl
  00b20	03 cb		 add	 ecx, ebx
  00b22	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00b25	3b cb		 cmp	 ecx, ebx
  00b27	0f 86 70 00 00
	00		 jbe	 $LN226@inflateBac
  00b2d	0f 1f 00	 npad	 3
$LL215@inflateBac:

; 558  :                     PULLBYTE();

  00b30	85 f6		 test	 esi, esi
  00b32	75 1a		 jne	 SHORT $LN221@inflateBac
  00b34	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00b37	50		 push	 eax
  00b38	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00b3b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00b3e	8b f0		 mov	 esi, eax
  00b40	83 c4 08	 add	 esp, 8
  00b43	85 f6		 test	 esi, esi
  00b45	0f 84 e8 01 00
	00		 je	 $LN369@inflateBac
  00b4b	8b 55 e4	 mov	 edx, DWORD PTR _last$[ebp]
$LN221@inflateBac:
  00b4e	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
  00b51	8b cb		 mov	 ecx, ebx
  00b53	83 c3 08	 add	 ebx, 8
  00b56	4e		 dec	 esi
  00b57	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00b5a	0f b6 de	 movzx	 ebx, dh
  00b5d	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00b60	47		 inc	 edi
  00b61	d3 e0		 shl	 eax, cl
  00b63	01 45 f8	 add	 DWORD PTR _hold$1$[ebp], eax
  00b66	0f b7 45 e6	 movzx	 eax, WORD PTR _last$[ebp+2]
  00b6a	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00b6d	bf 01 00 00 00	 mov	 edi, 1
  00b72	0f b6 ca	 movzx	 ecx, dl
  00b75	03 cb		 add	 ecx, ebx
  00b77	d3 e7		 shl	 edi, cl
  00b79	8b cb		 mov	 ecx, ebx
  00b7b	4f		 dec	 edi
  00b7c	23 7d f8	 and	 edi, DWORD PTR _hold$1$[ebp]
  00b7f	d3 ef		 shr	 edi, cl
  00b81	03 f8		 add	 edi, eax
  00b83	8b 45 f4	 mov	 eax, DWORD PTR _state$1$[ebp]
  00b86	8b 40 54	 mov	 eax, DWORD PTR [eax+84]
  00b89	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00b8c	8b c8		 mov	 ecx, eax
  00b8e	c1 e9 08	 shr	 ecx, 8
  00b91	0f b6 c9	 movzx	 ecx, cl
  00b94	03 cb		 add	 ecx, ebx
  00b96	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00b99	3b cb		 cmp	 ecx, ebx
  00b9b	77 93		 ja	 SHORT $LL215@inflateBac
$LN226@inflateBac:

; 559  :                 }
; 560  :                 DROPBITS(last.bits);

  00b9d	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  00ba0	0f b6 ce	 movzx	 ecx, dh
  00ba3	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00ba6	d3 ef		 shr	 edi, cl
  00ba8	2b d9		 sub	 ebx, ecx
$LN225@inflateBac:

; 561  :             }
; 562  :             DROPBITS(here.bits);

  00baa	8b c8		 mov	 ecx, eax
  00bac	c1 e9 08	 shr	 ecx, 8
  00baf	0f b6 c9	 movzx	 ecx, cl
  00bb2	d3 ef		 shr	 edi, cl
  00bb4	2b d9		 sub	 ebx, ecx
  00bb6	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00bb9	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 563  :             if (here.op & 64) {

  00bbc	a8 40		 test	 al, 64			; 00000040H
  00bbe	74 16		 je	 SHORT $LN327@inflateBac

; 564  :                 strm->msg = (char *)"invalid distance code";

  00bc0	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00bc3	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@LBKINIKP@invalid?5distance?5code@

; 565  :                 state->mode = BAD;

  00bca	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 566  :                 break;

  00bd1	e9 31 01 00 00	 jmp	 $LN548@inflateBac
$LN327@inflateBac:

; 567  :             }
; 568  :             state->offset = (unsigned)here.val;

  00bd6	8b c8		 mov	 ecx, eax
  00bd8	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00bdb	89 4d d8	 mov	 DWORD PTR $T1[ebp], ecx
  00bde	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 569  : 
; 570  :             /* get distance extra bits, if any */
; 571  :             state->extra = (unsigned)(here.op) & 15;

  00be1	0f b6 c8	 movzx	 ecx, al
  00be4	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00be7	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 572  :             if (state->extra != 0) {

  00bea	74 60		 je	 SHORT $LN242@inflateBac

; 573  :                 NEEDBITS(state->extra);

  00bec	3b d9		 cmp	 ebx, ecx
  00bee	73 3f		 jae	 SHORT $LN230@inflateBac
  00bf0	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LL233@inflateBac:
  00bf3	85 f6		 test	 esi, esi
  00bf5	75 1d		 jne	 SHORT $LN238@inflateBac
  00bf7	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00bfa	50		 push	 eax
  00bfb	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00bfe	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00c01	8b f0		 mov	 esi, eax
  00c03	83 c4 08	 add	 esp, 8
  00c06	85 f6		 test	 esi, esi
  00c08	0f 84 25 01 00
	00		 je	 $LN369@inflateBac
  00c0e	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00c11	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LN238@inflateBac:
  00c14	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00c17	8b cb		 mov	 ecx, ebx
  00c19	d3 e0		 shl	 eax, cl
  00c1b	83 c3 08	 add	 ebx, 8
  00c1e	03 f8		 add	 edi, eax
  00c20	4e		 dec	 esi
  00c21	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00c24	40		 inc	 eax
  00c25	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00c28	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  00c2b	3b d9		 cmp	 ebx, ecx
  00c2d	72 c4		 jb	 SHORT $LL233@inflateBac
$LN230@inflateBac:

; 574  :                 state->offset += BITS(state->extra);

  00c2f	b8 01 00 00 00	 mov	 eax, 1
  00c34	d3 e0		 shl	 eax, cl
  00c36	48		 dec	 eax
  00c37	23 c7		 and	 eax, edi

; 575  :                 DROPBITS(state->extra);

  00c39	d3 ef		 shr	 edi, cl
  00c3b	01 42 48	 add	 DWORD PTR [edx+72], eax
  00c3e	2b d9		 sub	 ebx, ecx
  00c40	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00c43	89 45 d8	 mov	 DWORD PTR $T1[ebp], eax
  00c46	89 7d f8	 mov	 DWORD PTR _hold$1$[ebp], edi
  00c49	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
$LN242@inflateBac:

; 576  :             }
; 577  :             if (state->offset > state->wsize - (state->whave < state->wsize ?

  00c4c	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00c4f	39 4a 30	 cmp	 DWORD PTR [edx+48], ecx
  00c52	1b c0		 sbb	 eax, eax
  00c54	23 45 ec	 and	 eax, DWORD PTR _left$1$[ebp]
  00c57	2b c8		 sub	 ecx, eax
  00c59	39 4d d8	 cmp	 DWORD PTR $T1[ebp], ecx
  00c5c	76 16		 jbe	 SHORT $LL246@inflateBac

; 578  :                                                 left : 0)) {
; 579  :                 strm->msg = (char *)"invalid distance too far back";

  00c5e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00c61	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@

; 580  :                 state->mode = BAD;

  00c68	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 581  :                 break;

  00c6f	e9 93 00 00 00	 jmp	 $LN548@inflateBac
$LL246@inflateBac:

; 582  :             }
; 583  :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 584  : 
; 585  :             /* copy match from window to output */
; 586  :             do {
; 587  :                 ROOM();

  00c74	83 7d ec 00	 cmp	 DWORD PTR _left$1$[ebp], 0
  00c78	75 25		 jne	 SHORT $LN247@inflateBac
  00c7a	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00c7d	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00c80	51		 push	 ecx
  00c81	50		 push	 eax
  00c82	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00c85	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00c88	89 4d ec	 mov	 DWORD PTR _left$1$[ebp], ecx
  00c8b	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  00c8e	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00c91	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c94	85 c0		 test	 eax, eax
  00c96	0f 85 9e 00 00
	00		 jne	 $LN372@inflateBac
  00c9c	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN247@inflateBac:

; 588  :                 copy = state->wsize - state->offset;

  00c9f	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00ca2	8b 52 2c	 mov	 edx, DWORD PTR [edx+44]

; 589  :                 if (copy < left) {
; 590  :                     from = put + copy;
; 591  :                     copy = left - copy;
; 592  :                 }
; 593  :                 else {
; 594  :                     from = put - state->offset;
; 595  :                     copy = left;
; 596  :                 }
; 597  :                 if (copy > state->length) copy = state->length;

  00ca5	8b 7d e8	 mov	 edi, DWORD PTR _put$1$[ebp]
  00ca8	2b d0		 sub	 edx, eax
  00caa	8b cf		 mov	 ecx, edi
  00cac	2b c8		 sub	 ecx, eax
  00cae	3b 55 ec	 cmp	 edx, DWORD PTR _left$1$[ebp]
  00cb1	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  00cb4	0f 43 c1	 cmovae	 eax, ecx
  00cb7	89 45 d0	 mov	 DWORD PTR _from$1$[ebp], eax
  00cba	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
  00cbd	8b c8		 mov	 ecx, eax
  00cbf	2b ca		 sub	 ecx, edx
  00cc1	3b d0		 cmp	 edx, eax
  00cc3	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00cc6	0f 43 c8	 cmovae	 ecx, eax
  00cc9	8b 42 44	 mov	 eax, DWORD PTR [edx+68]

; 598  :                 state->length -= copy;

  00ccc	3b c8		 cmp	 ecx, eax
  00cce	8b d0		 mov	 edx, eax
  00cd0	0f 46 d1	 cmovbe	 edx, ecx
  00cd3	8b 4d d0	 mov	 ecx, DWORD PTR _from$1$[ebp]
  00cd6	2b c2		 sub	 eax, edx
  00cd8	89 55 d8	 mov	 DWORD PTR _copy$2$[ebp], edx
  00cdb	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00cde	89 42 44	 mov	 DWORD PTR [edx+68], eax

; 599  :                 left -= copy;

  00ce1	8b 55 d8	 mov	 edx, DWORD PTR _copy$2$[ebp]
  00ce4	29 55 ec	 sub	 DWORD PTR _left$1$[ebp], edx
$LL252@inflateBac:

; 600  :                 do {
; 601  :                     *put++ = *from++;

  00ce7	8a 01		 mov	 al, BYTE PTR [ecx]
  00ce9	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00cec	88 07		 mov	 BYTE PTR [edi], al
  00cee	47		 inc	 edi

; 602  :                 } while (--copy);

  00cef	83 ea 01	 sub	 edx, 1
  00cf2	75 f3		 jne	 SHORT $LL252@inflateBac

; 603  :             } while (state->length != 0);

  00cf4	8b 55 f4	 mov	 edx, DWORD PTR _state$1$[ebp]
  00cf7	89 7d e8	 mov	 DWORD PTR _put$1$[ebp], edi
  00cfa	8b 7d f8	 mov	 edi, DWORD PTR _hold$1$[ebp]
  00cfd	83 7a 44 00	 cmp	 DWORD PTR [edx+68], 0
  00d01	0f 85 6d ff ff
	ff		 jne	 $LL246@inflateBac
$LN548@inflateBac:

; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  00d07	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00d0a	2d 3f 3f 00 00	 sub	 eax, 16191		; 00003f3fH
  00d0f	83 f8 12	 cmp	 eax, 18			; 00000012H
  00d12	0f 86 5d f3 ff
	ff		 jbe	 $LN585@inflateBac
$LN341@inflateBac:

; 618  : 
; 619  :         default:                /* can't happen, but makes compilers happy */
; 620  :             ret = Z_STREAM_ERROR;

  00d18	bf fe ff ff ff	 mov	 edi, -2			; fffffffeH
$inf_leave$587:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d1d	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00d20	8b 4d fc	 mov	 ecx, DWORD PTR _next$[ebp]

; 627  :     strm->avail_in = have;

  00d23	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00d26	89 08		 mov	 DWORD PTR [eax], ecx

; 628  :     return ret;

  00d28	8b c7		 mov	 eax, edi
  00d2a	5f		 pop	 edi
  00d2b	5e		 pop	 esi
  00d2c	5b		 pop	 ebx

; 629  : }

  00d2d	8b e5		 mov	 esp, ebp
  00d2f	5d		 pop	 ebp
  00d30	c2 14 00	 ret	 20			; 00000014H
$LN369@inflateBac:

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00d33	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _next$[ebp], 0
$LN372@inflateBac:
  00d3a	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d3f	eb dc		 jmp	 SHORT $inf_leave$587
$LN371@inflateBac:

; 342  :                 copy = state->length;
; 343  :                 PULL();

  00d41	89 5d fc	 mov	 DWORD PTR _next$[ebp], ebx
  00d44	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d49	eb d2		 jmp	 SHORT $inf_leave$587
$LN337@inflateBac:

; 604  :             break;
; 605  : 
; 606  :         case DONE:
; 607  :             /* inflate stream terminated properly -- write leftover output */
; 608  :             ret = Z_STREAM_END;
; 609  :             if (left < state->wsize) {

  00d4b	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00d4e	bf 01 00 00 00	 mov	 edi, 1
  00d53	8b 4d ec	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00d56	3b c8		 cmp	 ecx, eax
  00d58	73 c3		 jae	 SHORT $inf_leave$587

; 610  :                 if (out(out_desc, state->window, state->wsize - left))

  00d5a	2b c1		 sub	 eax, ecx
  00d5c	50		 push	 eax
  00d5d	ff 72 38	 push	 DWORD PTR [edx+56]
  00d60	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00d63	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00d66	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d69	85 c0		 test	 eax, eax
  00d6b	74 b0		 je	 SHORT $inf_leave$587

; 611  :                     ret = Z_BUF_ERROR;

  00d6d	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH

; 612  :             }
; 613  :             goto inf_leave;

  00d72	eb a9		 jmp	 SHORT $inf_leave$587
$LN340@inflateBac:

; 614  : 
; 615  :         case BAD:
; 616  :             ret = Z_DATA_ERROR;

  00d74	bf fd ff ff ff	 mov	 edi, -3			; fffffffdH

; 617  :             goto inf_leave;

  00d79	eb a2		 jmp	 SHORT $inf_leave$587
$LN254@inflateBac:

; 274  :         return Z_STREAM_ERROR;

  00d7b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 629  : }

  00d80	8b e5		 mov	 esp, ebp
  00d82	5d		 pop	 ebp
  00d83	c2 14 00	 ret	 20			; 00000014H
  00d86	66 90		 npad	 2
$LN513@inflateBac:
  00d88	00 00 00 00	 DD	 $LN255@inflateBac
  00d8c	00 00 00 00	 DD	 $LN31@inflateBac
  00d90	00 00 00 00	 DD	 $LN56@inflateBac
  00d94	00 00 00 00	 DD	 $LN302@inflateBac
  00d98	00 00 00 00	 DD	 $LN337@inflateBac
  00d9c	00 00 00 00	 DD	 $LN340@inflateBac
  00da0	00 00 00 00	 DD	 $LN341@inflateBac
$LN512@inflateBac:
  00da4	00		 DB	 0
  00da5	06		 DB	 6
  00da6	01		 DB	 1
  00da7	06		 DB	 6
  00da8	06		 DB	 6
  00da9	02		 DB	 2
  00daa	06		 DB	 6
  00dab	06		 DB	 6
  00dac	06		 DB	 6
  00dad	03		 DB	 3
  00dae	06		 DB	 6
  00daf	06		 DB	 6
  00db0	06		 DB	 6
  00db1	06		 DB	 6
  00db2	06		 DB	 6
  00db3	06		 DB	 6
  00db4	06		 DB	 6
  00db5	04		 DB	 4
  00db6	05		 DB	 5
  00db7	90		 npad	 1
$LN514@inflateBac:
  00db8	00 00 00 00	 DD	 $LN259@inflateBac
  00dbc	00 00 00 00	 DD	 $LN260@inflateBac
  00dc0	00 00 00 00	 DD	 $LN261@inflateBac
  00dc4	00 00 00 00	 DD	 $LN262@inflateBac
_inflateBack@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\cpython\externals\zlib-1.2.11\infback.c
;	COMDAT _inflateBackEnd@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateBackEnd@4 PROC					; COMDAT

; 633  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 634  :     if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 25		 je	 SHORT $LN3@inflateBac
  0000b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0000e	85 c0		 test	 eax, eax
  00010	74 1e		 je	 SHORT $LN3@inflateBac
  00012	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00015	85 c9		 test	 ecx, ecx
  00017	74 17		 je	 SHORT $LN3@inflateBac

; 636  :     ZFREE(strm, strm->state);

  00019	50		 push	 eax
  0001a	ff 76 28	 push	 DWORD PTR [esi+40]
  0001d	ff d1		 call	 ecx
  0001f	83 c4 08	 add	 esp, 8

; 637  :     strm->state = Z_NULL;

  00022	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 638  :     Tracev((stderr, "inflate: end\n"));
; 639  :     return Z_OK;

  00029	33 c0		 xor	 eax, eax
  0002b	5e		 pop	 esi

; 640  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
$LN3@inflateBac:

; 635  :         return Z_STREAM_ERROR;

  00030	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00035	5e		 pop	 esi

; 640  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
_inflateBackEnd@4 ENDP
_TEXT	ENDS
END
